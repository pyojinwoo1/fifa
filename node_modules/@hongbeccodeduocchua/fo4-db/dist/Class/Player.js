"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
class Player {
    client;
    url;
    constructor(client) {
        this.client = client;
    }
    // Public methods
    async find(options) {
        if (!options) {
            const { db } = await this.client.rest("get", "?q=fo4db&locale=" + this.client.options.region);
            return db.map((data) => this.valiDateData(data));
        }
        else {
            let path = `?q=fo4db`;
            path =
                this.valiDateFindOptions(options, path) +
                    `&locale=${this.client.options.region}`;
            const { db } = await this.client.rest("get", path);
            return db.map((data) => this.valiDateData(data));
        }
    }
    // Private methods
    valiDateData(data) {
        const { pos, name, uid, team_name, liveperfamount, skill_level, year_short, } = data;
        return {
            name,
            id: uid,
            position: pos,
            team: team_name,
            livePerAmount: liveperfamount,
            skillLevel: skill_level,
            season: year_short,
        };
    }
    valiDateFindOptions(options, path) {
        const { name, positions, seasons, attributes, sPositions, hiddenStats, country, teamColors, bodyType, workRateAtt, workRateDef, preferFoot, weakFoot, salary, livePerf, skillMoves, reputation, weight, height, age, birthyear, } = options;
        path = `${path}${name ? `&playername=${encodeURIComponent(name.toLowerCase())}` : ""}${positions ? `&position=${positions.join(",")}` : ""}${seasons ? `&class=${seasons.join(",")}` : ""}${attributes
            ? `&attr=${this.valiDateData2(attributes)}`
            : ""}${sPositions
            ? `&spos=${this.valiDateData2(sPositions)}}`
            : ""}${hiddenStats ? `&trait=${hiddenStats.join(",")}` : ""}${country ? `&country=${country}` : ""}${teamColors
            ? `&teamcolor=${teamColors.filter((v, i) => i <= 2).join(",")}`
            : ""}${bodyType
            ? `&bodytype=${bodyType.filter((v, i) => i <= 2).join(",")}`
            : ""}${workRateAtt ? `&workrate_att=${workRateAtt}` : ""}${workRateDef ? `&workrate_def=${workRateDef}` : ""}${preferFoot ? `&preferfoot=${preferFoot}` : ""}${weakFoot ? `&weakfoot=${weakFoot}` : ""}${salary ? `&fp=${salary.min + "-" + salary.max}` : ""}${livePerf ? `&liveperf=${livePerf.min + "to" + livePerf.max}` : ""}${skillMoves ? `&skillmoves=${skillMoves}` : ""}${reputation ? `&reputation=${reputation}` : ""}${weight ? `&weight=${weight.min + "-" + weight.max}` : ""}${height ? `&height=${height.min + "-" + height.max}` : ""}${age ? `&age=${age.min + "-" + age.max}` : ""}${birthyear ? `&birthyear=${birthyear}` : ""}`;
        this.url = path;
        console.log(path);
        return path;
    }
    valiDateData2(attributes) {
        return attributes
            .map((attr) => {
            // @ts-ignore
            const { name, min, max } = attr;
            return `${name}_${min}-${max}`;
        })
            .filter((a, i) => i <= 5)
            .join(",");
    }
}
exports.Player = Player;
